function F(a,b) {
    this.a = a;
    this.b = b;
}

let obj = new F(2,5);

F.prototype.a = 1;
F.prototype.b = 2;
F.prototype.c = 3;

delete obj.a;
console.log(obj.a);
delete obj.c;
console.log(obj.b);
console.log(obj.c);

// Цепочка прототипов :
//     Когда JavaScript не находит свойство в самом объекте, он автоматически ищет его в прототипе
// Собственные свойства vs прототипные свойства :
//     Собственные свойства имеют приоритет перед свойствами прототипа
// Когда мы удаляем собственное свойство (например, delete obj.a), JavaScript начинает использовать свойство из прототипа
// Удаление свойств :
//     delete obj.c ничего не делает, потому что c является свойством прототипа, а не самого объекта obj
// Мы можем только скрыть или переопределить свойство прототипа созданием собственного свойства с тем же именем